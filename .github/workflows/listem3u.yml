# Simple workflow for deploying static content to GitHub Pages
name: Code_source_Quality_Gate
#https://docs.github.com/fr/actions/using-workflows/workflow-syntax-for-github-actions
#https://www.githubstatus.com/
#https://github.com/charliermarsh/ruff
#https://github.com/bruschin/listem3u/new/main?filename=.github%2Fworkflows%2Fstatic.yml
#https://docs.github.com/fr/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests
#https://help.github.com/pages/
#https://docs.github.com/fr/actions/learn-github-actions/understanding-github-actions
run-name: GA ${{ github.event.head_commit.message }} ${{ github.sha }}

on:
  label:
    types:
      - created
  push:
    branches: [ "release/V1.6", "9-construction-v16", "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run
# in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production
# deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # <Not provided for brevity>
    # At a minimum this job should upload artifacts using
    # actions/upload-pages-artifact
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        python-version: ["3.10"]
        node-version: ["16"]
    steps:
      - uses: actions/checkout@v3
      # https://github.com/actions/checkout
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Use node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          #check-latest: true
      - uses: actions/cache@v3
        id: cache
        with:
          path: ~/.cache/pip
          key: |
            ${{ runner.os }}-pip-${{ hashFiles('**/devtools/requirements.*') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          sudo apt-get install -y graphviz rhino lcov
          python -m pip install --upgrade pip
          python -m pip install pylint-common --use-pep517
          if [ -f ./devtools/requirements.txt ]; then
            pip install -r ./devtools/requirements.txt;
          fi
          export TZ="Europe/Paris"
          bash ./devtools/lanceur_pytest.bash
          bash ./devtools/lanceur_pylint.bash
          bash ./devtools/lanceur_ruff.bash
          bash ./devtools/lanceur_sphinx.bash
          # pwd
          # ls -lrt
          mv rapports/htmlcov docs/_build/html/
          mv rapports/coverage.xml src/
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: 'docs/_build/html'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
      - name: Use node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          #check-latest: true
      - name: Run tox
        run: |
          bash ./devtools/lanceur_tox.bash
      - name: SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: src
        env:
          name: github-pages
          # sonarcloud.io
          SONAR_HOST_URL: ${{ secrets.SONAR_IO_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_IO_TOKEN_CI }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # sonar.cloudmf.dev
          #SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          #SONAR_TOKEN: ${{ secrets.SONAR_REPAIRE_TOKEN }}
